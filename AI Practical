print("192311373-Leo Raj")
import heapq
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]
directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def is_goal(state):
    return state == goal_state

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x = (val - 1) // 3
                goal_y = (val - 1) % 3
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

def get_neighbors(state):
    neighbors = []
    # Find the blank (0) position
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                x, y = i, j
                break

    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]  # Copy the state
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def solve_puzzle(start_state):
    visited = set()
    pq = []
    heapq.heappush(pq, (manhattan_distance(start_state), 0, start_state, []))

    while pq:
        est_cost, cost, current_state, path = heapq.heappop(pq)

        state_tuple = tuple(tuple(row) for row in current_state)
        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        if is_goal(current_state):
            return path + [current_state]

        for neighbor in get_neighbors(current_state):
            if tuple(tuple(row) for row in neighbor) not in visited:
                heapq.heappush(pq, (
                    cost + 1 + manhattan_distance(neighbor),
                    cost + 1,
                    neighbor,
                    path + [current_state]
                ))
    return None
start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]

solution = solve_puzzle(start_state)
if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for step in solution:
        for row in step:
            print(row)
        print("-----")
else:
    print("No solution found.")
